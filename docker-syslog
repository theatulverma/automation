####inputinput {####input for syslog#The input part just launch tcp server that will listen on port 5140#Each incoming line of log will be tagged as a syslog type.syslog {type => "syslog"host => ["$HOSTNAME"]port => "5140"    }}filter {if [type] == "syslog" { multiline {     patterns_dir => "/opt/patterns"     pattern => "^%{CUSTOM_SYSLOG_TIMESTAMP}"     negate => true     what => "previous"}grok {   patterns_dir => "/opt/patterns"    match => { "message" => "\A%{CUSTOM_SYSLOG_TIMESTAMP:CREATED_AT}\s+%{LOGLEVEL:LOG_LEVEL}\s+%{DATA:LOG_MESSAGE}?\s*$(?<STACKTRACE>(?m:.*))?"}}if "_grokparsefailure" in [tags] {}if "docker/" in [program] {    mutate {      add_field => {        "container_id" => "%{program}"      }    }    mutate {      gsub => [        "container_id", "docker/", ""      ]    }    mutate {      update => [        "program", "docker"      ]    }}}}output {if [type] == "syslog" {# output to syslog index elasticsearch {    hosts => ["localhost:7200"]    index => "docker-syslog-%{+YYYY.MM.dd}"    manage_template => false    document_type => "input_syslog"  }   if ([LOG_LEVEL] == "ERROR" or [LOG_LEVEL] == "WARN") and ("Exception" in [STACKTRACE] or "Error" in [STACKTRACE]){        hipchat {          room_id => "Docker-1.7"          token => "*"          host => "hipchat.com"          color => "random"          format => "%{CREATED_AT} %{LOG_LEVEL} %{LOG_MESSAGE}"        }        slack {          url => "https://hooks.slack.com/services/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"          channel => "docker-1v7"          username => "Autobot"          format => "%{CREATED_AT} %{LOG_LEVEL} %{LOG_MESSAGE}"        }    }}}
